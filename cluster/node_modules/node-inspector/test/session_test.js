var assert = require('assert'),
    session = require('../lib/session');

var on_, send_, request_, connected_, data_, s;

var mockDebugger = {
  attachDebugger: function() {
    return {
      send: function(data) {
        send_.push(data);
      },
      request: function(command, params, callback) {
        request_[command] = { params: params, callback: callback };
      },
      close: function() {
        connected_ = false;
      },
      connected: true,
      on: function(event) {
        on_.push(event);
      }
    };
  }
};

var mockConn = {
  write: function(data) {
    data_ = data;
  }
}

module.exports = {
  setup: function(fn) {
    on_ = [], send_ = [], request_ = {}, connected_ = true, data_ = '';
    s = session.create(mockConn, mockDebugger, 9999, {});
    s.enableDebugger();
    fn();
  },
  
  testWireUpDebugEvents: function() {
    assert.includes(on_, 'break');
    assert.includes(on_, 'close');
    assert.includes(on_, 'connect');
    assert.includes(on_, 'exception');
    assert.includes(on_, 'error');
  },
  
  testDisableDebugger: function() {
    assert.ok(connected_);
    s.disableDebugger();
    assert.ok(!connected_);
  },
  
  testPauseNotRunning: function() {
    s.pause();
    assert.isDefined(request_['suspend']);
    var msg = { running: false };
    request_['suspend'].callback(msg);
    assert.isDefined(request_['backtrace']);
    var bt = { body: {}};
    request_['backtrace'].callback(bt);
    assert.includes(data_, 'pausedScript');
  },
  
  testPauseStillRunning: function() {
    s.pause();
    assert.isDefined(request_['suspend']);
    var msg = { running: true };
    request_['suspend'].callback(msg);
    assert.isUndefined(request_['backtrace']);
    assert.ok(!(/pausedScript/.test(data_)))
  },
  
  testResume: function() {
    s.resume();
    assert.isDefined(request_['continue']);
    assert.includes(data_, 'resumedScript');
  },
  
  testStepOver: function() {
    s.stepOverStatement();
    assert.isDefined(request_['continue']);
    assert.equal(request_['continue'].params.arguments.stepaction, 'next');
    assert.includes(data_, 'resumedScript');
  },
  
  testStepIn: function() {
    s.stepIntoStatement();
    assert.isDefined(request_['continue']);
    assert.equal(request_['continue'].params.arguments.stepaction, 'in');
    assert.includes(data_, 'resumedScript');
  },
  
  testStepOut: function() {
    s.stepOutOfFunction();
    assert.isDefined(request_['continue']);
    assert.equal(request_['continue'].params.arguments.stepaction, 'out');
    assert.includes(data_, 'resumedScript');
  },
  
  testClearConsole: function() {
    s.clearConsoleMessages();
    assert.includes(data_, 'consoleMessagesCleared')
  }
  
}